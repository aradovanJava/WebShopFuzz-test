package webshop2024api;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.numberMatches;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import static org.hamcrest.Matchers.containsString;
import static org.junit.Assert.assertNotNull;

import hr.algebra.api.webshop2024api.EvoMasterDriver;
import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import java.util.Arrays;
import java.util.List;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;




/**
 * This file was automatically generated by EvoMaster on 2024-07-17T23:27:49.113+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 53
 * <br>
 * Used time: 2h 0m 2s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("SHOPPING_CART","CART_ITEMS","CATEGORIES","SUBCATEGORIES","PRODUCTS","ORDER_ITEMS","IMAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 1839L)
            .and().insertInto("CATEGORIES", 1838L)
                .d("NAME", "\"nnazSZn_Wc0OVhzt_\"")
            .and().insertInto("SUBCATEGORIES", 1837L)
                .d("NAME", "\"HrvNMjdtGK8\"")
                .r("CATEGORY_ID", 1838L)
            .and().insertInto("IMAGE", 1836L)
                .d("IMAGE_B64", "\"_EM_64158_XYZ_G\"")
            .and().insertInto("PRODUCTS", 1835L)
                .d("NAME", "\"TzJDd\"")
                .d("PRICE", "0.07461912")
                .r("SUBCATEGORY_ID", 1837L)
            .and().insertInto("CART_ITEMS", 1834L)
                .d("QUANTITY", "769")
                .r("PRODUCT_ID", 1835L)
                .r("CART_ID", 1839L)
            .and().insertInto("SHOPPING_CART", 9417L)
                .d("SESSION_ID", "\"T2dBseBLLNz\"")
                .d("USERNAME", "\"RB5sBTfPdkqr6O\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/UUo0rLURLUCU;e")
                .then()
                .statusCode(500) // hr/algebra/api/webshop2024api/CustomResponseErrors/ErrorResponse_16_getPath
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 1839L)
            .and().insertInto("CATEGORIES", 1838L)
                .d("NAME", "\"nnazSZn_Wc0OVhzt_\"")
            .and().insertInto("SUBCATEGORIES", 1837L)
                .d("NAME", "\"HrvNMjdtGK8\"")
                .r("CATEGORY_ID", 1838L)
            .and().insertInto("IMAGE", 1836L)
                .d("IMAGE_B64", "\"_EM_64158_XYZ_G\"")
            .and().insertInto("PRODUCTS", 1835L)
                .d("NAME", "\"TzJDd\"")
                .d("PRICE", "0.07461912")
                .r("SUBCATEGORY_ID", 1837L)
            .and().insertInto("CART_ITEMS", 1834L)
                .d("QUANTITY", "769")
                .r("PRODUCT_ID", 1835L)
                .r("CART_ID", 1839L)
            .and().insertInto("SHOPPING_CART", 9417L)
                .d("SESSION_ID", "\"T2dBseBLLNz\"")
                .d("USERNAME", "\"RB5sBTfPdkqr6O\"")
            .and().insertInto("SHOPPING_CART", 1591L)
                .d("SESSION_ID", "\"UUo0rLURLUCU;e\"")
                .d("USERNAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/UUo0rLURLUCU;e")
                .then()
                .statusCode(500) // hr/algebra/api/webshop2024api/CustomResponseErrors/ErrorResponse_16_getPath
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
