package webshop2024api;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.api.EMTestUtils.isValidURIorEmpty;
import static org.evomaster.client.java.controller.api.EMTestUtils.resolveLocation;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.numberMatches;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.nullValue;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import hr.algebra.api.webshop2024api.EvoMasterDriver;
import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;




/**
 * This file was automatically generated by EvoMaster on 2024-07-17T23:27:49.137+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 34 tests
 * <br>
 * Covered targets: 738
 * <br>
 * Used time: 2h 0m 2s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CATEGORIES","SUBCATEGORIES","PRODUCTS","CART_ITEMS","ORDER_ITEMS","SHOPPING_CART","IMAGE","USERS","AUTHORITIES","NOTIFICATIONS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 61L)
                .d("SESSION_ID", "\"gPbGmb9l5f1A9f9M\"")
                .d("USERNAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/gPbGmb9l5f1A9f9M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 80L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"e74WjEJv\"")
            .and().insertInto("USERS", 81L)
                .d("USER_IDD", "119")
                .d("EMAIL", "\"_EM_254_XYZ_\"")
                .d("ENABLED", "false")
                .d("PASSWORD", "\"UEO9J7DAt2ulr\"")
                .d("USERNAME", "\"_EM_255_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/e74WjEJv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 2319L)
                .d("NAME", "\"_EM_6853_XYZ_\"")
            .and().insertInto("CATEGORIES", 2320L)
                .d("NAME", "\"_EM_6854_XYZ_\"")
            .and().insertInto("CATEGORIES", 2321L)
                .d("NAME", "\"_EM_6855_XYZ_\"")
            .and().insertInto("CATEGORIES", 2322L)
                .d("NAME", "\"_EM_6856_XYZ_\"")
            .and().insertInto("CATEGORIES", 13L)
                .d("NAME", "\"Zzp\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/categories/5?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Deleted category with ID: 5"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 944L)
                .d("NAME", "\"TeMkyWCw0vs2Qv95\"")
            .and().insertInto("CATEGORIES", 945L)
                .d("NAME", "\"_EM_2172_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 946L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"HgDwtR3Oxzqc8a\"")
            .and().insertInto("SHOPPING_CART", 947L)
                .d("SESSION_ID", "\"_EM_2173_XYZ_\"")
                .d("USERNAME", "\"_EM_2174_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 948L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"Lh7yxZ7vDQfTRK\"")
            .and().insertInto("CATEGORIES", 950L)
                .d("NAME", "\"N_Sz9sMTgZx7IWuY\"")
            .and().insertInto("SUBCATEGORIES", 949L)
                .d("NAME", "\"_EM_2175_XYZ_\"")
                .r("CATEGORY_ID", 950L)
            .and().insertInto("CATEGORIES", 952L)
                .d("NAME", "\"_EM_2176_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 951L)
                .d("NAME", "\"kRtQ4x\"")
                .r("CATEGORY_ID", 952L)
            .and().insertInto("CATEGORIES", 954L)
                .d("NAME", "\"_EM_2177_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 953L)
                .d("NAME", "\"HhqQr0unE\"")
                .r("CATEGORY_ID", 945L)
            .and().insertInto("SHOPPING_CART", 990L)
            .and().insertInto("CATEGORIES", 989L)
                .d("NAME", "\"yK2nsqopNeMxTU\"")
            .and().insertInto("SUBCATEGORIES", 988L)
                .d("NAME", "\"IE\"")
                .r("CATEGORY_ID", 952L)
            .and().insertInto("IMAGE", 987L)
                .d("IMAGE_B64", "\"KYebPlz\"")
            .and().insertInto("PRODUCTS", 986L)
                .d("NAME", "\"6H_tHVPVFzu\"")
                .d("PRICE", "0.5664894")
                .r("SUBCATEGORY_ID", 953L)
            .and().insertInto("CART_ITEMS", 985L)
                .d("QUANTITY", "217")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 947L)
            .and().insertInto("SHOPPING_CART", 996L)
            .and().insertInto("CATEGORIES", 995L)
                .d("NAME", "\"EhKPxlXH2uZ5\"")
            .and().insertInto("SUBCATEGORIES", 994L)
                .d("NAME", "\"eJOYXetQGtYv\"")
                .r("CATEGORY_ID", 995L)
            .and().insertInto("IMAGE", 993L)
                .d("IMAGE_B64", "\"LIbH7\"")
            .and().insertInto("PRODUCTS", 992L)
                .d("NAME", "\"FIoXUaOXgsYrViBT\"")
                .d("PRICE", "0.09748477")
                .r("SUBCATEGORY_ID", 949L)
            .and().insertInto("CART_ITEMS", 991L)
                .d("QUANTITY", "66")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 947L)
            .and().insertInto("SHOPPING_CART", 1002L)
            .and().insertInto("CATEGORIES", 1001L)
                .d("NAME", "\"yamnV1tdEtox\"")
            .and().insertInto("SUBCATEGORIES", 1000L)
                .d("NAME", "\"xpzMRwaPNEXIv1C\"")
                .r("CATEGORY_ID", 995L)
            .and().insertInto("IMAGE", 999L)
                .d("IMAGE_B64", "\"IW57\"")
            .and().insertInto("PRODUCTS", 998L)
                .d("NAME", "\"jwoE5vhSBaU\"")
                .d("PRICE", "0.99378014")
                .r("SUBCATEGORY_ID", 953L)
            .and().insertInto("CART_ITEMS", 997L)
                .d("QUANTITY", "856625909")
                .r("PRODUCT_ID", 992L)
                .r("CART_ID", 948L)
            .and().insertInto("SHOPPING_CART", 1008L)
            .and().insertInto("CATEGORIES", 1007L)
                .d("NAME", "\"iJ\"")
            .and().insertInto("SUBCATEGORIES", 1006L)
                .d("NAME", "\"d7mA\"")
                .r("CATEGORY_ID", 989L)
            .and().insertInto("IMAGE", 1005L)
                .d("IMAGE_B64", "\"to9IvCq8F3\"")
            .and().insertInto("PRODUCTS", 1004L)
                .d("NAME", "\"3lMbk\"")
                .d("PRICE", "0.71024716")
                .r("SUBCATEGORY_ID", 994L)
            .and().insertInto("CART_ITEMS", 1003L)
                .d("QUANTITY", "32")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 996L)
            .and().insertInto("SHOPPING_CART", 1014L)
            .and().insertInto("CATEGORIES", 1013L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 1012L)
                .d("NAME", "\"gEDiwqh\"")
                .r("CATEGORY_ID", 950L)
            .and().insertInto("IMAGE", 1011L)
                .d("IMAGE_B64", "\"SwaFg07eQ\"")
            .and().insertInto("PRODUCTS", 1010L)
                .d("NAME", "\"Xa3wVB\"")
                .d("PRICE", "0.7689878")
                .r("SUBCATEGORY_ID", 1000L)
            .and().insertInto("CART_ITEMS", 1009L)
                .d("QUANTITY", "868")
                .r("PRODUCT_ID", 1004L)
                .r("CART_ID", 1008L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1846_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/categories/allCategories?EMextraParam123=_EM_1845_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'categoryId'", numberMatches(1.0))
                .body("[0].'name'", containsString("TeMkyWCw0vs2Qv95"))
                .body("[1].'categoryId'", numberMatches(2.0))
                .body("[1].'name'", containsString("_EM_2172_XYZ_"))
                .body("[2].'categoryId'", numberMatches(3.0))
                .body("[2].'name'", containsString("N_Sz9sMTgZx7IWuY"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 772L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 771L)
                .d("NAME", "\"I6yfIjUuxOxv7x\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("SHOPPING_CART", 8402L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"\"")
            .and().insertInto("SHOPPING_CART", 8403L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "NULL")
            .and().insertInto("SHOPPING_CART", 8404L)
                .d("SESSION_ID", "\"RxehD\"")
                .d("USERNAME", "NULL")
            .and().insertInto("CATEGORIES", 11783L)
                .d("NAME", "\"dgInzugA02c2VS\"")
            .and().insertInto("SUBCATEGORIES", 11782L)
                .d("NAME", "\"iXLf\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("IMAGE", 11781L)
                .d("IMAGE_B64", "\"mD494VKS_9\"")
            .and().insertInto("PRODUCTS", 11780L)
                .d("DESCRIPTION", "\"r\"")
                .d("NAME", "\"WZ14vALFZ9YePpX5\"")
                .d("PRICE", "0.63768697")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11787L)
                .d("NAME", "\"j29rXdt2bB\"")
            .and().insertInto("SUBCATEGORIES", 11786L)
                .d("NAME", "\"W49bL\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11785L)
                .d("IMAGE_B64", "\"jeAmnLJsSY8YN6O\"")
            .and().insertInto("PRODUCTS", 11784L)
                .d("DESCRIPTION", "\"8uJHIAKC3NDoMk\"")
                .d("NAME", "\"SV\"")
                .d("PRICE", "0.27346116")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11791L)
                .d("NAME", "\"keRKV6_L\"")
            .and().insertInto("SUBCATEGORIES", 11790L)
                .d("NAME", "\"\"")
                .r("CATEGORY_ID", 11791L)
            .and().insertInto("IMAGE", 11789L)
                .d("IMAGE_B64", "\"n1pgixRI7Iz\"")
            .and().insertInto("PRODUCTS", 11788L)
                .d("DESCRIPTION", "\"zrm0fX2FY\"")
                .d("NAME", "\"p2HEISPkio0mT2\"")
                .d("PRICE", "0.5786728")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11786L)
            .and().insertInto("CATEGORIES", 11795L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 11794L)
                .d("NAME", "\"dpMfenrFLIj0fZM\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11793L)
                .d("IMAGE_B64", "\"lX\"")
            .and().insertInto("PRODUCTS", 11792L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"8VB3d\"")
                .d("PRICE", "0.6966895")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/subcategories/4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Deleted subcategory with ID: 4"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 772L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 771L)
                .d("NAME", "\"I6yfIjUuxOxv7x\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("SHOPPING_CART", 8402L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"\"")
            .and().insertInto("SHOPPING_CART", 8403L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"_EM_89789_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 8404L)
                .d("SESSION_ID", "\"RxehD\"")
                .d("USERNAME", "NULL")
            .and().insertInto("CATEGORIES", 11783L)
                .d("NAME", "\"dgInzugA02c2VS\"")
            .and().insertInto("SUBCATEGORIES", 11782L)
                .d("NAME", "\"iXLf\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11781L)
                .d("IMAGE_B64", "\"mD494VKS_9\"")
            .and().insertInto("PRODUCTS", 11780L)
                .d("DESCRIPTION", "\"r\"")
                .d("NAME", "\"WZ14vALFZ9YePpX5\"")
                .d("PRICE", "0.63768697")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 771L)
            .and().insertInto("CATEGORIES", 11787L)
                .d("NAME", "\"j29rXdt2bB\"")
            .and().insertInto("SUBCATEGORIES", 11786L)
                .d("NAME", "\"W49bL\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11785L)
                .d("IMAGE_B64", "\"jeAmnLJsSY8YN6O\"")
            .and().insertInto("PRODUCTS", 11784L)
                .d("DESCRIPTION", "\"8uJHIAKC2NDoMk\"")
                .d("NAME", "\"SV\"")
                .d("PRICE", "0.27346116")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11791L)
                .d("NAME", "\"keRKV6_L\"")
            .and().insertInto("SUBCATEGORIES", 11790L)
                .d("NAME", "\"m\"")
                .r("CATEGORY_ID", 11791L)
            .and().insertInto("IMAGE", 11789L)
                .d("IMAGE_B64", "\"n1pgixRI7Iz\"")
            .and().insertInto("PRODUCTS", 11788L)
                .d("DESCRIPTION", "\"zrm0fX2FY\"")
                .d("NAME", "\"p2HEISPkio0mT2\"")
                .d("PRICE", "0.5786728")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11786L)
            .and().insertInto("CATEGORIES", 11795L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 11794L)
                .d("NAME", "\"dpMfenrFLIj0fZM\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11793L)
                .d("IMAGE_B64", "\"lX\"")
            .and().insertInto("PRODUCTS", 11792L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"8VB3d\"")
                .d("PRICE", "0.6966895")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/products/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Deleted product with ID: 2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/_EM_0_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart not found for user: _EM_0_XYZ_"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_39_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_37_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/categories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'categoryId'", numberMatches(1.0))
                .body("'name'", containsString("_EM_37_XYZ_"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/_EM_5_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart not found for session: _EM_5_XYZ_"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/subcategories/10?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 10"))
                .body("'path'", containsString(""));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/products/329")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - 329"))
                .body("'path'", containsString(""));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 2663L)
                .d("NAME", "\"_EM_51719_XYZ_\"")
            .and().insertInto("CATEGORIES", 2664L)
                .d("NAME", "\"5_V\"")
            .and().insertInto("CATEGORIES", 2665L)
                .d("NAME", "\"_xR\"")
            .and().insertInto("CATEGORIES", 2666L)
                .d("NAME", "\"_EM_51720_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 2837L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"CkM3kQk0zD\"")
            .and().insertInto("SHOPPING_CART", 2838L)
                .d("SESSION_ID", "\"Y55B7dBsHV4xTY\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CATEGORIES", 3690L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 3689L)
                .d("NAME", "\"U\"")
                .r("CATEGORY_ID", 2663L)
            .and().insertInto("CATEGORIES", 3692L)
                .d("NAME", "\"MSKcZb4V2Sq4m4mV\"")
            .and().insertInto("SUBCATEGORIES", 3691L)
                .d("NAME", "\"Ls9CDHMLJrHhCpp\"")
                .r("CATEGORY_ID", 2663L)
            .and().insertInto("CATEGORIES", 3694L)
                .d("NAME", "\"6\"")
            .and().insertInto("SUBCATEGORIES", 3693L)
                .d("NAME", "\"_EM_51721_XYZ_\"")
                .r("CATEGORY_ID", 2665L)
            .and().insertInto("CATEGORIES", 7546L)
                .d("NAME", "\"_EM_51722_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7545L)
                .d("NAME", "\"_EM_51723_XYZ_\"")
                .r("CATEGORY_ID", 2664L)
            .and().insertInto("IMAGE", 7544L)
                .d("IMAGE_B64", "\"m64m3N\"")
            .and().insertInto("PRODUCTS", 7543L)
                .d("DESCRIPTION", "\"_EM_51724_XYZ_\"")
                .d("NAME", "\"xHEyf1pk\"")
                .d("PRICE", "0.4686513")
                .r("IMAGE_ID", 7544L)
                .r("SUBCATEGORY_ID", 7545L)
            .and().insertInto("CATEGORIES", 7550L)
                .d("NAME", "\"_EM_51725_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7549L)
                .d("NAME", "\"_EM_51726_XYZ_\"")
                .r("CATEGORY_ID", 7546L)
            .and().insertInto("IMAGE", 7548L)
                .d("IMAGE_B64", "\"6d_S\"")
            .and().insertInto("PRODUCTS", 7547L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"D7UF9O3rLr\"")
                .d("PRICE", "0.9569674")
                .r("IMAGE_ID", 7544L)
                .r("SUBCATEGORY_ID", 7545L)
            .and().insertInto("CATEGORIES", 7554L)
                .d("NAME", "\"UqZWW2fXylHazU\"")
            .and().insertInto("SUBCATEGORIES", 7553L)
                .d("NAME", "\"XOUYF2Z\"")
                .r("CATEGORY_ID", 3694L)
            .and().insertInto("IMAGE", 7552L)
                .d("IMAGE_B64", "\"FliIiAKKn\"")
            .and().insertInto("PRODUCTS", 7551L)
                .d("DESCRIPTION", "\"1t9QvS06AdXtpp7\"")
                .d("NAME", "\"3tnWpJxqe6hoAWv\"")
                .d("PRICE", "0.66462415")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 3693L)
            .and().insertInto("CATEGORIES", 7558L)
                .d("NAME", "\"7qurAmoSsdiA\"")
            .and().insertInto("SUBCATEGORIES", 7557L)
                .d("NAME", "\"oKnRlOn\"")
                .r("CATEGORY_ID", 3692L)
            .and().insertInto("IMAGE", 7556L)
                .d("IMAGE_B64", "\"pI\"")
            .and().insertInto("PRODUCTS", 7555L)
                .d("DESCRIPTION", "\"_EM_51727_XYZ_\"")
                .d("NAME", "\"MHccGHffvm\"")
                .d("PRICE", "0.74661034")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 7553L)
            .and().insertInto("CATEGORIES", 7562L)
                .d("NAME", "\"_EM_51728_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7561L)
                .d("NAME", "\"_EM_51729_XYZ_\"")
                .r("CATEGORY_ID", 2666L)
            .and().insertInto("IMAGE", 7560L)
                .d("IMAGE_B64", "\"duWiHcrslgW\"")
            .and().insertInto("PRODUCTS", 7559L)
                .d("DESCRIPTION", "\"ICZMIvmxZ\"")
                .d("NAME", "\"_EM_51730_XYZ_\"")
                .d("PRICE", "0.9633604")
                .r("IMAGE_ID", 7560L)
                .r("SUBCATEGORY_ID", 3693L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"categoryId\": 457, " + 
                    " \"name\": \"KDxhfmAQgHobJzU\" " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'categoryId'", numberMatches(10.0))
                .body("'name'", containsString("KDxhfmAQgHobJzU"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/categories/690?EMextraParam123=_EM_17_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 690"))
                .body("'path'", containsString(""));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByShoppingCartId/539")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart id not found - 539"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/subcategories/505?EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 505"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/products/916?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - 916"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/categories/438?EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 438"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_52_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_50_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/687")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 687"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_40_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/531?EMextraParam123=_EM_42_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 531"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_49_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 798, " + 
                    " \"name\": \"_EM_43_XYZ_\", " + 
                    " \"description\": \"_EM_2417_XYZ_\", " + 
                    " \"price\": 5000.0, " + 
                    " \"subcategory\": { " + 
                    " \"subcategoryId\": 944607605, " + 
                    " \"name\": \"_EM_2418_XYZ_\" " + 
                    " }, " + 
                    " \"imageUrl\": \"_EM_46_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/products/806")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - 806"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 742, " + 
                    " \"name\": \"_EM_1499_XYZ_\", " + 
                    " \"description\": \"I5kMkUCpE9\", " + 
                    " \"price\": 0.35, " + 
                    " \"subcategory\": { " + 
                    " \"name\": \"_EM_1194_XYZ_\" " + 
                    " }, " + 
                    " \"imageUrl\": \"https://2JVABsfWYac:752/z0/q8\", " + 
                    " \"b64image\": \"_EM_1197_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/products?EMextraParam123=_EM_1198_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Can't get input stream from URL!"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        String location_categories = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"categoryId\": 1, " + 
                    " \"name\": \"_EM_2585_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/categories?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'categoryId'", numberMatches(1.0))
                .body("'name'", containsString("_EM_2585_XYZ_"));
        location_categories = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_categories));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_categories, baseUrlOfSut + "/webShopApi/categories/1"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'categoryId'", numberMatches(1.0))
                .body("'name'", containsString("_EM_2585_XYZ_"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 772L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 771L)
                .d("NAME", "\"I6yfIjUuxOxv7x\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("SHOPPING_CART", 8402L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"\"")
            .and().insertInto("SHOPPING_CART", 8403L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "NULL")
            .and().insertInto("SHOPPING_CART", 8404L)
                .d("SESSION_ID", "\"RxehD\"")
                .d("USERNAME", "NULL")
            .and().insertInto("CATEGORIES", 11783L)
                .d("NAME", "\"dgInzugA02c2VS\"")
            .and().insertInto("SUBCATEGORIES", 11782L)
                .d("NAME", "\"iXLf\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("IMAGE", 11781L)
                .d("IMAGE_B64", "\"mD494VKS_9\"")
            .and().insertInto("PRODUCTS", 11780L)
                .d("DESCRIPTION", "\"r\"")
                .d("NAME", "\"WZ14vALFZ9YePpX5\"")
                .d("PRICE", "0.63768697")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11787L)
                .d("NAME", "\"j29rXdt2bB\"")
            .and().insertInto("SUBCATEGORIES", 11786L)
                .d("NAME", "\"W49bL\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11785L)
                .d("IMAGE_B64", "\"jeAmnLJsSY8YN6O\"")
            .and().insertInto("PRODUCTS", 11784L)
                .d("DESCRIPTION", "\"8uJHIAKC3NDoMk\"")
                .d("NAME", "\"SV\"")
                .d("PRICE", "0.27346116")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11791L)
                .d("NAME", "\"keRKV6_L\"")
            .and().insertInto("SUBCATEGORIES", 11790L)
                .d("NAME", "\"\"")
                .r("CATEGORY_ID", 11791L)
            .and().insertInto("IMAGE", 11789L)
                .d("IMAGE_B64", "\"n1pgixRI7Iz\"")
            .and().insertInto("PRODUCTS", 11788L)
                .d("DESCRIPTION", "\"zrm0fX2FY\"")
                .d("NAME", "\"p2HEISPkio0mT2\"")
                .d("PRICE", "0.5786728")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11786L)
            .and().insertInto("CATEGORIES", 11795L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 11794L)
                .d("NAME", "\"dpMfenrFLIj0fZM\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11793L)
                .d("IMAGE_B64", "\"lX\"")
            .and().insertInto("PRODUCTS", 11792L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"8VB3d\"")
                .d("PRICE", "0.6966895")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/subcategories/allSubcategories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'subcategoryId'", numberMatches(1.0))
                .body("[0].'name'", containsString("I6yfIjUuxOxv7x"))
                .body("[0].'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'category'.'name'", containsString(""))
                .body("[1].'subcategoryId'", numberMatches(2.0))
                .body("[1].'name'", containsString("iXLf"))
                .body("[1].'category'.'categoryId'", numberMatches(1.0))
                .body("[1].'category'.'name'", containsString(""))
                .body("[2].'subcategoryId'", numberMatches(3.0))
                .body("[2].'name'", containsString("W49bL"))
                .body("[2].'category'.'categoryId'", numberMatches(2.0))
                .body("[2].'category'.'name'", containsString("dgInzugA02c2VS"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 97L)
                .d("NAME", "\"NW\"")
            .and().insertInto("SUBCATEGORIES", 96L)
                .d("NAME", "\"_EM_285_XYZ_\"")
                .r("CATEGORY_ID", 97L)
            .and().insertInto("IMAGE", 95L)
                .d("IMAGE_B64", "\"x32_\"")
            .and().insertInto("PRODUCTS", 94L)
                .d("DESCRIPTION", "\"Xk5IYEPLUVIXzxk\"")
                .d("NAME", "\"_EM_286_XYZ_\"")
                .d("PRICE", "0.15522955")
                .r("IMAGE_ID", 95L)
                .r("SUBCATEGORY_ID", 96L)
            .and().insertInto("SHOPPING_CART", 2047L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "NULL")
            .and().insertInto("SHOPPING_CART", 2048L)
                .d("SESSION_ID", "\"5qYaRr8eZze42\"")
                .d("USERNAME", "\"QNgvh3L8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/subcategories/1?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'subcategoryId'", numberMatches(1.0))
                .body("'name'", containsString("_EM_285_XYZ_"))
                .body("'category'.'categoryId'", numberMatches(1.0))
                .body("'category'.'name'", containsString("NW"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 97L)
                .d("NAME", "\"NW\"")
            .and().insertInto("SUBCATEGORIES", 96L)
                .d("NAME", "\"_EM_285_XYZ_\"")
                .r("CATEGORY_ID", 97L)
            .and().insertInto("IMAGE", 95L)
                .d("IMAGE_B64", "\"x32_\"")
            .and().insertInto("PRODUCTS", 94L)
                .d("DESCRIPTION", "\"Xk5IYEPLUVIXzxk\"")
                .d("NAME", "\"_EM_286_XYZ_\"")
                .d("PRICE", "0.15522955")
                .r("IMAGE_ID", 95L)
                .r("SUBCATEGORY_ID", 96L)
            .and().insertInto("SHOPPING_CART", 2047L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "NULL")
            .and().insertInto("SHOPPING_CART", 2048L)
                .d("SESSION_ID", "\"5qYaRr8eZze42\"")
                .d("USERNAME", "\"QNgvh3L8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"subcategoryId\": 1, " + 
                    " \"name\": \"ffSaeeUFkV3y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 772L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 771L)
                .d("NAME", "\"I6yfIjUuxOxv7x\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("SHOPPING_CART", 8402L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"\"")
            .and().insertInto("SHOPPING_CART", 8403L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"_EM_89789_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 8404L)
                .d("SESSION_ID", "\"RxehD\"")
                .d("USERNAME", "NULL")
            .and().insertInto("CATEGORIES", 11783L)
                .d("NAME", "\"dgInzugA02c2VS\"")
            .and().insertInto("SUBCATEGORIES", 11782L)
                .d("NAME", "\"iXLf\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("IMAGE", 11781L)
                .d("IMAGE_B64", "\"mD494VKS_9\"")
            .and().insertInto("PRODUCTS", 11780L)
                .d("DESCRIPTION", "\"r\"")
                .d("NAME", "\"WZ14vALFZ9YePpX5\"")
                .d("PRICE", "0.63768697")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 771L)
            .and().insertInto("CATEGORIES", 11787L)
                .d("NAME", "\"j29rXdt2bB\"")
            .and().insertInto("SUBCATEGORIES", 11786L)
                .d("NAME", "\"W49bL\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11785L)
                .d("IMAGE_B64", "\"jeAmnLJsSY8YN6O\"")
            .and().insertInto("PRODUCTS", 11784L)
                .d("DESCRIPTION", "\"8uJHIAKC2NDoMk\"")
                .d("NAME", "\"SV\"")
                .d("PRICE", "0.27346116")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11791L)
                .d("NAME", "\"keRKV6_L\"")
            .and().insertInto("SUBCATEGORIES", 11790L)
                .d("NAME", "\"m\"")
                .r("CATEGORY_ID", 11791L)
            .and().insertInto("IMAGE", 11789L)
                .d("IMAGE_B64", "\"n1ngixRI7Iz\"")
            .and().insertInto("PRODUCTS", 11788L)
                .d("DESCRIPTION", "\"zrm0fX2FY\"")
                .d("NAME", "\"p2HEISPkio0mT2\"")
                .d("PRICE", "0.5786728")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11786L)
            .and().insertInto("CATEGORIES", 11795L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 11794L)
                .d("NAME", "\"dpMfenrFLIj0fZM\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11793L)
                .d("IMAGE_B64", "\"lX\"")
            .and().insertInto("PRODUCTS", 11792L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"8VB3d\"")
                .d("PRICE", "0.6966895")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"SN7x_3\" " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_27_XYZ_\", " + 
                    " \"category\": { " + 
                    " \"categoryId\": 334, " + 
                    " \"name\": \"_EM_28_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [FKIBORB6PTVY1T1N3V6KLB56L5S]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 2663L)
                .d("NAME", "\"_EM_51719_XYZ_\"")
            .and().insertInto("CATEGORIES", 2664L)
                .d("NAME", "\"5_V\"")
            .and().insertInto("CATEGORIES", 2665L)
                .d("NAME", "\"_xR\"")
            .and().insertInto("CATEGORIES", 2666L)
                .d("NAME", "\"_EM_51720_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 2837L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"CkM3kQk0zD\"")
            .and().insertInto("SHOPPING_CART", 2838L)
                .d("SESSION_ID", "\"Y55B7dBsHV4xTY\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CATEGORIES", 3690L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 3689L)
                .d("NAME", "\"U\"")
                .r("CATEGORY_ID", 2663L)
            .and().insertInto("CATEGORIES", 3692L)
                .d("NAME", "\"MSKcZb4V2Sq4m4mV\"")
            .and().insertInto("SUBCATEGORIES", 3691L)
                .d("NAME", "\"Ls9CDHMLJrHhCpp\"")
                .r("CATEGORY_ID", 2663L)
            .and().insertInto("CATEGORIES", 3694L)
                .d("NAME", "\"6\"")
            .and().insertInto("SUBCATEGORIES", 3693L)
                .d("NAME", "\"_EM_51721_XYZ_\"")
                .r("CATEGORY_ID", 2665L)
            .and().insertInto("CATEGORIES", 7546L)
                .d("NAME", "\"_EM_51722_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7545L)
                .d("NAME", "\"_EM_51723_XYZ_\"")
                .r("CATEGORY_ID", 2664L)
            .and().insertInto("IMAGE", 7544L)
                .d("IMAGE_B64", "\"m64m3N\"")
            .and().insertInto("PRODUCTS", 7543L)
                .d("DESCRIPTION", "\"_EM_51724_XYZ_\"")
                .d("NAME", "\"xHEyf1pk\"")
                .d("PRICE", "0.4686513")
                .r("IMAGE_ID", 7544L)
                .r("SUBCATEGORY_ID", 7545L)
            .and().insertInto("CATEGORIES", 7550L)
                .d("NAME", "\"_EM_51725_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7549L)
                .d("NAME", "\"_EM_51726_XYZ_\"")
                .r("CATEGORY_ID", 7546L)
            .and().insertInto("IMAGE", 7548L)
                .d("IMAGE_B64", "\"6d_S\"")
            .and().insertInto("PRODUCTS", 7547L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"D7UF9O3rLr\"")
                .d("PRICE", "0.9569674")
                .r("IMAGE_ID", 7544L)
                .r("SUBCATEGORY_ID", 7545L)
            .and().insertInto("CATEGORIES", 7554L)
                .d("NAME", "\"UqZWW2fXylHazU\"")
            .and().insertInto("SUBCATEGORIES", 7553L)
                .d("NAME", "\"XOUYF2Z\"")
                .r("CATEGORY_ID", 3694L)
            .and().insertInto("IMAGE", 7552L)
                .d("IMAGE_B64", "\"FliIiAKKn\"")
            .and().insertInto("PRODUCTS", 7551L)
                .d("DESCRIPTION", "\"1t9QvS06AdXtpp7\"")
                .d("NAME", "\"3tnWpJxqe6hoAWv\"")
                .d("PRICE", "0.66462415")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 3693L)
            .and().insertInto("CATEGORIES", 7558L)
                .d("NAME", "\"7qurAmoSsdiA\"")
            .and().insertInto("SUBCATEGORIES", 7557L)
                .d("NAME", "\"oKnRlOn\"")
                .r("CATEGORY_ID", 3692L)
            .and().insertInto("IMAGE", 7556L)
                .d("IMAGE_B64", "\"pI\"")
            .and().insertInto("PRODUCTS", 7555L)
                .d("DESCRIPTION", "\"_EM_51727_XYZ_\"")
                .d("NAME", "\"MHccGHffvm\"")
                .d("PRICE", "0.74661034")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 7553L)
            .and().insertInto("CATEGORIES", 7562L)
                .d("NAME", "\"_EM_51728_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 7561L)
                .d("NAME", "\"_EM_51729_XYZ_\"")
                .r("CATEGORY_ID", 2666L)
            .and().insertInto("IMAGE", 7560L)
                .d("IMAGE_B64", "\"duWiHcrslgW\"")
            .and().insertInto("PRODUCTS", 7559L)
                .d("DESCRIPTION", "\"ICZMIvmxZ\"")
                .d("NAME", "\"_EM_51730_XYZ_\"")
                .d("PRICE", "0.9633604")
                .r("IMAGE_ID", 7560L)
                .r("SUBCATEGORY_ID", 3693L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"subcategoryId\": 725, " + 
                    " \"name\": \"PPsbD7TOTHV1b5\", " + 
                    " \"category\": { " + 
                    " \"categoryId\": 8, " + 
                    " \"name\": \"jAUd2J\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'subcategoryId'", numberMatches(9.0))
                .body("'name'", containsString("PPsbD7TOTHV1b5"))
                .body("'category'.'categoryId'", numberMatches(8.0))
                .body("'category'.'name'", containsString("_EM_51722_XYZ_"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 772L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 771L)
                .d("NAME", "\"I6yfIjUuxOxv7x\"")
                .r("CATEGORY_ID", 772L)
            .and().insertInto("SHOPPING_CART", 8402L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"\"")
            .and().insertInto("SHOPPING_CART", 8403L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"_EM_89789_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 8404L)
                .d("SESSION_ID", "\"RxehD\"")
                .d("USERNAME", "NULL")
            .and().insertInto("CATEGORIES", 11783L)
                .d("NAME", "\"dgInzugA02c2VS\"")
            .and().insertInto("SUBCATEGORIES", 11782L)
                .d("NAME", "\"iXLf\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11781L)
                .d("IMAGE_B64", "\"mD494VKS_9\"")
            .and().insertInto("PRODUCTS", 11780L)
                .d("DESCRIPTION", "\"r\"")
                .d("NAME", "\"WZ14vALFZ9YePpX5\"")
                .d("PRICE", "0.63768697")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 771L)
            .and().insertInto("CATEGORIES", 11787L)
                .d("NAME", "\"j29rXdt2bB\"")
            .and().insertInto("SUBCATEGORIES", 11786L)
                .d("NAME", "\"W49bL\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11785L)
                .d("IMAGE_B64", "\"jeAmnLJsSY8YN6O\"")
            .and().insertInto("PRODUCTS", 11784L)
                .d("DESCRIPTION", "\"8uJHIAKC2NDoMk\"")
                .d("NAME", "\"SV\"")
                .d("PRICE", "0.27346116")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11782L)
            .and().insertInto("CATEGORIES", 11791L)
                .d("NAME", "\"keRKV6_L\"")
            .and().insertInto("SUBCATEGORIES", 11790L)
                .d("NAME", "\"m\"")
                .r("CATEGORY_ID", 11791L)
            .and().insertInto("IMAGE", 11789L)
                .d("IMAGE_B64", "\"n1pgixRI7Iz\"")
            .and().insertInto("PRODUCTS", 11788L)
                .d("DESCRIPTION", "\"zrm0fX2FY\"")
                .d("NAME", "\"p2HEISPkio0mT2\"")
                .d("PRICE", "0.5786728")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11786L)
            .and().insertInto("CATEGORIES", 11795L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 11794L)
                .d("NAME", "\"dpMfenrFLIj0fZM\"")
                .r("CATEGORY_ID", 11783L)
            .and().insertInto("IMAGE", 11793L)
                .d("IMAGE_B64", "\"lX\"")
            .and().insertInto("PRODUCTS", 11792L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"8VB3d\"")
                .d("PRICE", "0.6966895")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 11794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"subcategoryId\": 8, " + 
                    " \"name\": \"SN7x_3\", " + 
                    " \"category\": { " + 
                    " \"name\": \"eqEjzC5xKw6t\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("org.hibernate.TransientPropertyValueException: object references an unsaved transient instance - save the transient instance before flushing : hr.algebra.dal.webshop2024dal.Entity.Subcategory.category -> hr.algebra.dal.webshop2024dal.Entity.Category; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: object references an unsaved transient instance - save the transient instance before flushing : hr.algebra.dal.webshop2024dal.Entity.Subcategory.category -> hr.algebra.dal.webshop2024dal.Entity.Category"))
                .body("'path'", containsString(""));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 182L)
                .d("NAME", "\"gmCzCYCz7K441\"")
            .and().insertInto("SUBCATEGORIES", 181L)
                .d("NAME", "\"_EM_455_XYZ_\"")
                .r("CATEGORY_ID", 182L)
            .and().insertInto("IMAGE", 180L)
                .d("IMAGE_B64", "\"ZYLeVq8Chhg8Lrg\"")
            .and().insertInto("PRODUCTS", 179L)
                .d("DESCRIPTION", "\"7gVK1NcpVWdMg\"")
                .d("NAME", "\"C5F634f7N\"")
                .d("PRICE", "0.32579753")
                .d("IMAGE_ID", "NULL")
                .r("SUBCATEGORY_ID", 181L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/products/allProducts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'name'", containsString("C5F634f7N"))
                .body("[0].'description'", containsString("7gVK1NcpVWdMg"))
                .body("[0].'price'", numberMatches(0.33))
                .body("[0].'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'name'", containsString("_EM_455_XYZ_"))
                .body("[0].'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'category'.'name'", containsString("gmCzCYCz7K441"))
                .body("[0].'imageUrl'", nullValue())
                .body("[0].'b64image'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 97L)
                .d("NAME", "\"NW\"")
            .and().insertInto("SUBCATEGORIES", 96L)
                .d("NAME", "\"_EM_285_XYZ_\"")
                .r("CATEGORY_ID", 97L)
            .and().insertInto("IMAGE", 95L)
                .d("IMAGE_B64", "\"x32_\"")
            .and().insertInto("PRODUCTS", 94L)
                .d("DESCRIPTION", "\"Xk5IYEPLUVIXzxk\"")
                .d("NAME", "\"_EM_286_XYZ_\"")
                .d("PRICE", "0.15522955")
                .r("IMAGE_ID", 95L)
                .r("SUBCATEGORY_ID", 96L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/products/allProducts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'name'", containsString("_EM_286_XYZ_"))
                .body("[0].'description'", containsString("Xk5IYEPLUVIXzxk"))
                .body("[0].'price'", numberMatches(0.16))
                .body("[0].'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'name'", containsString("_EM_285_XYZ_"))
                .body("[0].'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'category'.'name'", containsString("NW"))
                .body("[0].'imageUrl'", nullValue())
                .body("[0].'b64image'", containsString("x32_"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 464L)
            .and().insertInto("CATEGORIES", 463L)
                .d("NAME", "\"mumdUR\"")
            .and().insertInto("SUBCATEGORIES", 462L)
                .d("NAME", "\"_EM_63086_XYZ_\"")
                .r("CATEGORY_ID", 463L)
            .and().insertInto("IMAGE", 461L)
                .d("IMAGE_B64", "\"tXwoU\"")
            .and().insertInto("PRODUCTS", 460L)
                .d("NAME", "\"Y5bj2ZLyJVe1m5\"")
                .d("PRICE", "0.6074437")
                .r("SUBCATEGORY_ID", 462L)
            .and().insertInto("CART_ITEMS", 459L)
                .d("QUANTITY", "42")
                .r("PRODUCT_ID", 460L)
                .r("CART_ID", 464L)
            .and().insertInto("SHOPPING_CART", 470L)
            .and().insertInto("CATEGORIES", 469L)
                .d("NAME", "\"CjT\"")
            .and().insertInto("SUBCATEGORIES", 468L)
                .d("NAME", "\"ukb0RV\"")
                .r("CATEGORY_ID", 463L)
            .and().insertInto("IMAGE", 467L)
                .d("IMAGE_B64", "\"0O5XbIKtfwTN6Dw\"")
            .and().insertInto("PRODUCTS", 466L)
                .d("NAME", "\"NfPI1fiCq\"")
                .d("PRICE", "0.83685005")
                .r("SUBCATEGORY_ID", 468L)
            .and().insertInto("CART_ITEMS", 465L)
                .d("QUANTITY", "641")
                .r("PRODUCT_ID", 460L)
                .r("CART_ID", 470L)
            .and().insertInto("SHOPPING_CART", 476L)
            .and().insertInto("CATEGORIES", 475L)
                .d("NAME", "\"uyI\"")
            .and().insertInto("SUBCATEGORIES", 474L)
                .d("NAME", "\"hnwfjMc\"")
                .r("CATEGORY_ID", 475L)
            .and().insertInto("IMAGE", 473L)
                .d("IMAGE_B64", "\"KlBaZ\"")
            .and().insertInto("PRODUCTS", 472L)
                .d("NAME", "\"_EM_63087_XYZ_\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 468L)
            .and().insertInto("CART_ITEMS", 471L)
                .d("QUANTITY", "524793")
                .r("PRODUCT_ID", 466L)
                .r("CART_ID", 476L)
            .and().insertInto("SHOPPING_CART", 482L)
            .and().insertInto("CATEGORIES", 481L)
                .d("NAME", "\"Mg9UEgUCB\"")
            .and().insertInto("SUBCATEGORIES", 480L)
                .d("NAME", "\"iDzIN\"")
                .r("CATEGORY_ID", 469L)
            .and().insertInto("IMAGE", 479L)
                .d("IMAGE_B64", "\"Ipe_KJpS7RTaWO\"")
            .and().insertInto("PRODUCTS", 478L)
                .d("NAME", "\"vvrdy\"")
                .d("PRICE", "1.1147908")
                .r("SUBCATEGORY_ID", 468L)
            .and().insertInto("CART_ITEMS", 477L)
                .d("QUANTITY", "122")
                .r("PRODUCT_ID", 466L)
                .r("CART_ID", 470L)
            .and().insertInto("SHOPPING_CART", 488L)
            .and().insertInto("CATEGORIES", 487L)
                .d("NAME", "\"AwCSXfThOAQsu69\"")
            .and().insertInto("SUBCATEGORIES", 486L)
                .d("NAME", "\"_EM_63088_XYZ_\"")
                .r("CATEGORY_ID", 463L)
            .and().insertInto("IMAGE", 485L)
                .d("IMAGE_B64", "\"vd84Pl5\"")
            .and().insertInto("PRODUCTS", 484L)
                .d("NAME", "\"I8c\"")
                .d("PRICE", "0.48274288")
                .r("SUBCATEGORY_ID", 474L)
            .and().insertInto("CART_ITEMS", 483L)
                .d("QUANTITY", "939")
                .r("PRODUCT_ID", 478L)
                .r("CART_ID", 488L)
            .and().insertInto("SHOPPING_CART", 4934L)
                .d("SESSION_ID", "\"\"")
                .d("USERNAME", "\"_EM_63089_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/allCartItems")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'cartItemId'", numberMatches(1.0))
                .body("[0].'shoppingCart'.'cartId'", numberMatches(1.0))
                .body("[0].'shoppingCart'.'username'", nullValue())
                .body("[0].'shoppingCart'.'sessionId'", nullValue())
                .body("[0].'product'.'productId'", numberMatches(1.0))
                .body("[0].'product'.'name'", containsString("Y5bj2ZLyJVe1m5"))
                .body("[0].'product'.'description'", nullValue())
                .body("[0].'product'.'price'", numberMatches(0.61))
                .body("[0].'product'.'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[0].'product'.'subcategory'.'name'", containsString("_EM_63086_XYZ_"))
                .body("[0].'product'.'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'product'.'subcategory'.'category'.'name'", containsString("mumdUR"))
                .body("[0].'product'.'imageUrl'", nullValue())
                .body("[0].'product'.'b64image'", nullValue())
                .body("[0].'quantity'", numberMatches(42.0))
                .body("[1].'cartItemId'", numberMatches(2.0))
                .body("[1].'shoppingCart'.'cartId'", numberMatches(2.0))
                .body("[1].'shoppingCart'.'username'", nullValue())
                .body("[1].'shoppingCart'.'sessionId'", nullValue())
                .body("[1].'product'.'productId'", numberMatches(1.0))
                .body("[1].'product'.'name'", containsString("Y5bj2ZLyJVe1m5"))
                .body("[1].'product'.'description'", nullValue())
                .body("[1].'product'.'price'", numberMatches(0.61))
                .body("[1].'product'.'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[1].'product'.'subcategory'.'name'", containsString("_EM_63086_XYZ_"))
                .body("[1].'product'.'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[1].'product'.'subcategory'.'category'.'name'", containsString("mumdUR"))
                .body("[1].'product'.'imageUrl'", nullValue())
                .body("[1].'product'.'b64image'", nullValue())
                .body("[1].'quantity'", numberMatches(641.0))
                .body("[2].'cartItemId'", numberMatches(3.0))
                .body("[2].'shoppingCart'.'cartId'", numberMatches(3.0))
                .body("[2].'shoppingCart'.'username'", nullValue())
                .body("[2].'shoppingCart'.'sessionId'", nullValue())
                .body("[2].'product'.'productId'", numberMatches(2.0))
                .body("[2].'product'.'name'", containsString("NfPI1fiCq"))
                .body("[2].'product'.'description'", nullValue())
                .body("[2].'product'.'price'", numberMatches(0.84))
                .body("[2].'product'.'subcategory'.'subcategoryId'", numberMatches(2.0))
                .body("[2].'product'.'subcategory'.'name'", containsString("ukb0RV"))
                .body("[2].'product'.'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[2].'product'.'subcategory'.'category'.'name'", containsString("mumdUR"))
                .body("[2].'product'.'imageUrl'", nullValue())
                .body("[2].'product'.'b64image'", nullValue())
                .body("[2].'quantity'", numberMatches(524793.0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 944L)
                .d("NAME", "\"TeMkyWCw0vs2Qv95\"")
            .and().insertInto("CATEGORIES", 945L)
                .d("NAME", "\"_EM_2172_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 946L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"HgDwtR3Oxzqc8a\"")
            .and().insertInto("SHOPPING_CART", 947L)
                .d("SESSION_ID", "\"_EM_2173_XYZ_\"")
                .d("USERNAME", "\"_EM_2174_XYZ_\"")
            .and().insertInto("SHOPPING_CART", 948L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"Lh7yxZ7vDQfTRK\"")
            .and().insertInto("CATEGORIES", 950L)
                .d("NAME", "\"N_Sz9sMTgZx7IWuY\"")
            .and().insertInto("SUBCATEGORIES", 949L)
                .d("NAME", "\"_EM_2175_XYZ_\"")
                .r("CATEGORY_ID", 950L)
            .and().insertInto("CATEGORIES", 952L)
                .d("NAME", "\"_EM_2176_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 951L)
                .d("NAME", "\"kRtQ4x\"")
                .r("CATEGORY_ID", 952L)
            .and().insertInto("CATEGORIES", 954L)
                .d("NAME", "\"_EM_2177_XYZ_\"")
            .and().insertInto("SUBCATEGORIES", 953L)
                .d("NAME", "\"HhqQr0unE\"")
                .r("CATEGORY_ID", 945L)
            .and().insertInto("SHOPPING_CART", 990L)
            .and().insertInto("CATEGORIES", 989L)
                .d("NAME", "\"yK2nsqopNeMxTU\"")
            .and().insertInto("SUBCATEGORIES", 988L)
                .d("NAME", "\"IE\"")
                .r("CATEGORY_ID", 952L)
            .and().insertInto("IMAGE", 987L)
                .d("IMAGE_B64", "\"KYebPlz\"")
            .and().insertInto("PRODUCTS", 986L)
                .d("NAME", "\"6H_tHVPVFzu\"")
                .d("PRICE", "0.5664894")
                .r("SUBCATEGORY_ID", 953L)
            .and().insertInto("CART_ITEMS", 985L)
                .d("QUANTITY", "217")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 947L)
            .and().insertInto("SHOPPING_CART", 996L)
            .and().insertInto("CATEGORIES", 995L)
                .d("NAME", "\"EhKPxlXH2uZ5\"")
            .and().insertInto("SUBCATEGORIES", 994L)
                .d("NAME", "\"eJOYXetQGtYv\"")
                .r("CATEGORY_ID", 995L)
            .and().insertInto("IMAGE", 993L)
                .d("IMAGE_B64", "\"LIbH7\"")
            .and().insertInto("PRODUCTS", 992L)
                .d("NAME", "\"FIoXUaOXgsYrViBT\"")
                .d("PRICE", "0.09748477")
                .r("SUBCATEGORY_ID", 949L)
            .and().insertInto("CART_ITEMS", 991L)
                .d("QUANTITY", "66")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 947L)
            .and().insertInto("SHOPPING_CART", 1002L)
            .and().insertInto("CATEGORIES", 1001L)
                .d("NAME", "\"yamnV1tdEtox\"")
            .and().insertInto("SUBCATEGORIES", 1000L)
                .d("NAME", "\"xpzMRwaPNEXIv1C\"")
                .r("CATEGORY_ID", 995L)
            .and().insertInto("IMAGE", 999L)
                .d("IMAGE_B64", "\"IW57\"")
            .and().insertInto("PRODUCTS", 998L)
                .d("NAME", "\"jwoE5vhSBaU\"")
                .d("PRICE", "0.99378014")
                .r("SUBCATEGORY_ID", 953L)
            .and().insertInto("CART_ITEMS", 997L)
                .d("QUANTITY", "856625909")
                .r("PRODUCT_ID", 992L)
                .r("CART_ID", 948L)
            .and().insertInto("SHOPPING_CART", 1008L)
            .and().insertInto("CATEGORIES", 1007L)
                .d("NAME", "\"iJ\"")
            .and().insertInto("SUBCATEGORIES", 1006L)
                .d("NAME", "\"d7mA\"")
                .r("CATEGORY_ID", 989L)
            .and().insertInto("IMAGE", 1005L)
                .d("IMAGE_B64", "\"to9IvCq8F3\"")
            .and().insertInto("PRODUCTS", 1004L)
                .d("NAME", "\"3lMbk\"")
                .d("PRICE", "0.71024716")
                .r("SUBCATEGORY_ID", 994L)
            .and().insertInto("CART_ITEMS", 1003L)
                .d("QUANTITY", "32")
                .r("PRODUCT_ID", 986L)
                .r("CART_ID", 996L)
            .and().insertInto("SHOPPING_CART", 1014L)
            .and().insertInto("CATEGORIES", 1013L)
                .d("NAME", "\"\"")
            .and().insertInto("SUBCATEGORIES", 1012L)
                .d("NAME", "\"gEDiwqh\"")
                .r("CATEGORY_ID", 950L)
            .and().insertInto("IMAGE", 1011L)
                .d("IMAGE_B64", "\"SwaFg07eQ\"")
            .and().insertInto("PRODUCTS", 1010L)
                .d("NAME", "\"Xa3wVB\"")
                .d("PRICE", "0.7689878")
                .r("SUBCATEGORY_ID", 1000L)
            .and().insertInto("CART_ITEMS", 1009L)
                .d("QUANTITY", "868")
                .r("PRODUCT_ID", 1004L)
                .r("CART_ID", 1008L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1840_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByShoppingCartId/2?EMextraParam123=_EM_1839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'cartItemId'", numberMatches(1.0))
                .body("[0].'shoppingCart'.'cartId'", numberMatches(2.0))
                .body("[0].'shoppingCart'.'username'", containsString("_EM_2174_XYZ_"))
                .body("[0].'shoppingCart'.'sessionId'", containsString("_EM_2173_XYZ_"))
                .body("[0].'product'.'productId'", numberMatches(1.0))
                .body("[0].'product'.'name'", containsString("6H_tHVPVFzu"))
                .body("[0].'product'.'description'", nullValue())
                .body("[0].'product'.'price'", numberMatches(0.57))
                .body("[0].'product'.'subcategory'.'subcategoryId'", numberMatches(3.0))
                .body("[0].'product'.'subcategory'.'name'", containsString("HhqQr0unE"))
                .body("[0].'product'.'subcategory'.'category'.'categoryId'", numberMatches(2.0))
                .body("[0].'product'.'subcategory'.'category'.'name'", containsString("_EM_2172_XYZ_"))
                .body("[0].'product'.'imageUrl'", nullValue())
                .body("[0].'product'.'b64image'", nullValue())
                .body("[0].'quantity'", numberMatches(217.0))
                .body("[1].'cartItemId'", numberMatches(2.0))
                .body("[1].'shoppingCart'.'cartId'", numberMatches(2.0))
                .body("[1].'shoppingCart'.'username'", containsString("_EM_2174_XYZ_"))
                .body("[1].'shoppingCart'.'sessionId'", containsString("_EM_2173_XYZ_"))
                .body("[1].'product'.'productId'", numberMatches(1.0))
                .body("[1].'product'.'name'", containsString("6H_tHVPVFzu"))
                .body("[1].'product'.'description'", nullValue())
                .body("[1].'product'.'price'", numberMatches(0.57))
                .body("[1].'product'.'subcategory'.'subcategoryId'", numberMatches(3.0))
                .body("[1].'product'.'subcategory'.'name'", containsString("HhqQr0unE"))
                .body("[1].'product'.'subcategory'.'category'.'categoryId'", numberMatches(2.0))
                .body("[1].'product'.'subcategory'.'category'.'name'", containsString("_EM_2172_XYZ_"))
                .body("[1].'product'.'imageUrl'", nullValue())
                .body("[1].'product'.'b64image'", nullValue())
                .body("[1].'quantity'", numberMatches(66.0));
        
    }


}
