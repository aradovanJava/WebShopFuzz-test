/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:32:19 GMT 2024
 */

package hr.algebra.dal.webshop2024dal.Entity;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.dal.webshop2024dal.Entity.Category;
import hr.algebra.dal.webshop2024dal.Entity.Image;
import hr.algebra.dal.webshop2024dal.Entity.Order;
import hr.algebra.dal.webshop2024dal.Entity.OrderItem;
import hr.algebra.dal.webshop2024dal.Entity.Product;
import hr.algebra.dal.webshop2024dal.Entity.Subcategory;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderItem_ESTest extends OrderItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2968);
      BigInteger bigInteger0 = new BigInteger(2968, mockRandom0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Order order0 = new Order((String) null, (LocalDateTime) null, bigDecimal0, "U");
      Product product0 = new Product();
      Integer integer0 = new Integer(0);
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      Integer integer1 = orderItem0.getQuantity();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Order order0 = new Order();
      Integer integer0 = new Integer(1175);
      BigDecimal bigDecimal0 = new BigDecimal(1175);
      OrderItem orderItem0 = new OrderItem(order0, (Product) null, integer0, bigDecimal0);
      Integer integer1 = orderItem0.getQuantity();
      assertEquals(1175, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Integer integer0 = new Integer((-19));
      orderItem0.setQuantity(integer0);
      Integer integer1 = orderItem0.getQuantity();
      assertEquals((-19), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Product product0 = orderItem0.getProduct();
      assertNull(product0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      BigDecimal bigDecimal0 = orderItem0.getPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1953));
      orderItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = orderItem0.getPrice();
      assertEquals((short) (-1953), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = new Order();
      Product product0 = new Product();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderItem orderItem0 = new OrderItem(order0, product0, (Integer) null, bigDecimal0);
      BigDecimal bigDecimal1 = orderItem0.getPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Order order0 = new Order("Df=kr", (LocalDateTime) null, bigDecimal0, "Df=kr");
      Product product0 = new Product();
      Integer integer0 = new Integer((-2979));
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      BigDecimal bigDecimal1 = orderItem0.getPrice();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Order order0 = new Order();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long((-1667L));
      Category category0 = new Category("l ?:V6Lo9:T>!}");
      Subcategory subcategory0 = new Subcategory(long0, "<", category0);
      Product product0 = new Product("wl |s)Xsr1\"P<8", "<", bigDecimal0, subcategory0, (Image) null);
      Integer integer0 = new Integer(0);
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      Long long1 = new Long(0);
      orderItem0.setOrderItemId(long1);
      Long long2 = orderItem0.getOrderItemId();
      assertFalse(long2.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Long long0 = new Long(1L);
      orderItem0.setOrderItemId(long0);
      Long long1 = orderItem0.getOrderItemId();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Long long0 = Long.valueOf((-1L));
      orderItem0.setOrderItemId(long0);
      Long long1 = orderItem0.getOrderItemId();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Order order0 = orderItem0.getOrder();
      assertNull(order0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Long long0 = orderItem0.getOrderItemId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Order order0 = new Order("Df=kr", (LocalDateTime) null, bigDecimal0, "Df=kr");
      Product product0 = new Product();
      Integer integer0 = new Integer((-2979));
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      Product product1 = orderItem0.getProduct();
      assertSame(product0, product1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Order order0 = new Order("Df=kr", (LocalDateTime) null, bigDecimal0, "Df=kr");
      Product product0 = new Product();
      Integer integer0 = new Integer((-2979));
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      Order order1 = orderItem0.getOrder();
      assertNull(order1.getOrderId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrderItem orderItem0 = new OrderItem();
      Integer integer0 = orderItem0.getQuantity();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Order order0 = new Order();
      BigDecimal bigDecimal0 = new BigDecimal(725.28147);
      Subcategory subcategory0 = new Subcategory();
      Product product0 = new Product(", price=", ", price=", bigDecimal0, subcategory0, (Image) null);
      Integer integer0 = new Integer(0);
      OrderItem orderItem0 = new OrderItem(order0, product0, integer0, bigDecimal0);
      BigDecimal bigDecimal1 = orderItem0.getPrice();
      assertEquals((byte) (-43), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Order order0 = new Order();
      Integer integer0 = new Integer((-3964));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderItem orderItem0 = new OrderItem(order0, (Product) null, integer0, bigDecimal0);
      orderItem0.setProduct((Product) null);
      assertEquals((-3964), (int)orderItem0.getQuantity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      Integer integer0 = new Integer((-3964));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderItem orderItem0 = new OrderItem(order0, (Product) null, integer0, bigDecimal0);
      orderItem0.setOrder(order0);
      assertNull(order0.getPaymentMethod());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Order order0 = new Order();
      Integer integer0 = new Integer((-3964));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderItem orderItem0 = new OrderItem(order0, (Product) null, integer0, bigDecimal0);
      String string0 = orderItem0.toString();
      assertEquals("OrderItem(orderItemId=null, order=Order(orderId=null, username=null, purchaseDate=null, totalAmount=null, paymentMethod=null), product=null, quantity=-3964, price=0)", string0);
  }
}
