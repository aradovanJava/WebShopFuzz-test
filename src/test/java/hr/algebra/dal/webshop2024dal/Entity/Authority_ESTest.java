/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 21:55:24 GMT 2024
 */

package hr.algebra.dal.webshop2024dal.Entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import hr.algebra.dal.webshop2024dal.Entity.Authority;
import hr.algebra.dal.webshop2024dal.Entity.User;
import hr.algebra.dal.webshop2024dal.Enum.Role;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Authority_ESTest extends Authority_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Authority authority0 = new Authority();
      assertNull(authority0.getId());
      
      User user0 = new User();
      Set<Authority> set0 = user0.getAuthorities();
      User user1 = new User("UC,MX0;P", true, "UC,MX0;P", set0);
      authority0.setUser(user1);
      authority0.toString();
      authority0.toString();
      authority0.getAuthority();
      authority0.getUser();
      User user2 = authority0.getUser();
      assertTrue(user2.isEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Authority authority0 = new Authority();
      Role role0 = Role.ROLE_SHOPPER;
      Authority authority1 = new Authority((User) null, role0);
      authority0.toString();
      authority1.setUser((User) null);
      authority1.setUser((User) null);
      Long long0 = new Long((-2288L));
      authority1.setId(long0);
      authority1.toString();
      Long long1 = authority1.getId();
      authority0.setId(long1);
      Long long2 = new Long(901L);
      authority0.setId(long2);
      authority0.setAuthority(role0);
      authority0.toString();
      authority0.getUser();
      authority0.getUser();
      authority0.setUser((User) null);
      User user0 = authority1.getUser();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Authority authority0 = new Authority();
      authority0.getId();
      User user0 = new User();
      authority0.setUser(user0);
      assertNull(user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Authority authority0 = new Authority();
      User user0 = new User();
      user0.setUsername("");
      authority0.setUser(user0);
      Role role0 = Role.ROLE_SHOPPER;
      authority0.setAuthority(role0);
      authority0.toString();
      Set<Authority> set0 = user0.getAuthorities();
      User user1 = new User("", false, "zuteKt", set0);
      user0.toString();
      user1.setUsername("Authority(id=");
      authority0.setAuthority(role0);
      authority0.setUser(user1);
      authority0.getUser();
      authority0.getAuthority();
      authority0.getUser();
      authority0.getUser();
      Role role1 = Role.ROLE_ADMIN;
      authority0.setAuthority(role1);
      authority0.setId((Long) null);
      Role role2 = Role.ROLE_SHOPPER;
      authority0.setAuthority(role2);
      String string0 = authority0.toString();
      assertEquals("Authority(id=null, user=User(username=Authority(id=, password=, enabled=false, email=zuteKt, authorities=[]), authority=ROLE_SHOPPER)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Authority authority0 = new Authority();
      authority0.getAuthority();
      // Undeclared exception!
      try { 
        Role.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Authority authority0 = new Authority();
      Role role0 = Role.ROLE_ADMIN;
      authority0.setAuthority(role0);
      User user0 = new User();
      Role role1 = Role.ROLE_SHOPPER;
      authority0.setAuthority(role1);
      authority0.setUser(user0);
      authority0.setUser(user0);
      Long long0 = new Long(0L);
      authority0.setId(long0);
      user0.setUsername("ob]PxK>");
      LinkedHashSet<Authority> linkedHashSet0 = new LinkedHashSet<Authority>();
      user0.setAuthorities(linkedHashSet0);
      authority0.setId(long0);
      authority0.setUser(user0);
      authority0.getId();
      authority0.setId(long0);
      authority0.getAuthority();
      authority0.toString();
      Long long1 = new Long(0L);
      authority0.setId(long1);
      String string0 = authority0.toString();
      assertEquals("Authority(id=0, user=User(username=ob]PxK>, password=null, enabled=false, email=null, authorities=[]), authority=ROLE_SHOPPER)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Role role0 = Role.ROLE_ADMIN;
      Authority authority0 = new Authority((User) null, role0);
      authority0.toString();
      Long long0 = new Long(1731L);
      authority0.setId(long0);
      authority0.setAuthority(role0);
      Long long1 = authority0.getId();
      authority0.setId(long1);
      assertEquals(1731L, (long)authority0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Authority authority0 = new Authority();
      Role role0 = Role.ROLE_SHOPPER;
      authority0.setAuthority(role0);
      authority0.getAuthority();
      authority0.getAuthority();
      // Undeclared exception!
      try { 
        Role.valueOf("'`Muo7j' WH$fccChg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant hr.algebra.dal.webshop2024dal.Enum.Role.'`Muo7j' WH$fccChg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Authority authority0 = new Authority();
      Role role0 = Role.ROLE_ADMIN;
      authority0.setAuthority(role0);
      User user0 = new User();
      Set<Authority> set0 = user0.getAuthorities();
      user0.setAuthorities(set0);
      authority0.setUser(user0);
      user0.setUsername("QuO)6<y~1/<9NB8~V.");
      authority0.setUser((User) null);
      Long long0 = new Long((-4100L));
      authority0.setId(long0);
      authority0.toString();
      authority0.setUser((User) null);
      authority0.setUser(user0);
      authority0.getUser();
      authority0.setAuthority(role0);
      authority0.toString();
      authority0.setId((Long) null);
      authority0.setUser((User) null);
      authority0.setUser((User) null);
      assertNull(authority0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      Set<Authority> set0 = user0.getAuthorities();
      User user1 = new User((String) null, false, "o<nZcQ'xq&", set0);
      Role role0 = Role.ROLE_SHOPPER;
      Authority authority0 = new Authority(user1, role0);
      User user2 = new User((String) null, false, "o<nZcQ'xq&", set0);
      authority0.setUser(user2);
      assertFalse(user2.equals((Object)user0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Authority authority0 = new Authority();
      authority0.toString();
      LinkedHashSet<Authority> linkedHashSet0 = new LinkedHashSet<Authority>();
      User user0 = new User("hr.algebra.dal.webshop2024dal.Entity.User", true, "hr.algebra.dal.webshop2024dal.Entity.User", linkedHashSet0);
      linkedHashSet0.add(authority0);
      user0.setEnabled(false);
      authority0.setUser(user0);
      authority0.getAuthority();
      User user1 = authority0.getUser();
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User();
      Role role0 = Role.ROLE_SHOPPER;
      Authority authority0 = new Authority(user0, role0);
      authority0.toString();
      authority0.getUser();
      authority0.setUser(user0);
      authority0.setAuthority(role0);
      Role role1 = Role.ROLE_ADMIN;
      Long long0 = new Long(0L);
      authority0.setId(long0);
      assertEquals(0L, (long)authority0.getId());
  }
}
