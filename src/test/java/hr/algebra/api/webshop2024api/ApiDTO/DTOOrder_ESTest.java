/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:37:37 GMT 2024
 */

package hr.algebra.api.webshop2024api.ApiDTO;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.ApiDTO.DTOOrder;
import java.math.BigDecimal;
import java.math.MathContext;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTOOrder_ESTest extends DTOOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      DTOOrder dTOOrder0 = new DTOOrder("wRd_*B${", localDateTime0, bigDecimal0, " #dU1j`\"_'a-@Qc_");
      String string0 = dTOOrder0.getUsername();
      assertEquals("wRd_*B${", string0);
      assertEquals(" #dU1j`\"_'a-@Qc_", dTOOrder0.getPaymentMethod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      dTOOrder0.setUsername("");
      String string0 = dTOOrder0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      DTOOrder dTOOrder0 = new DTOOrder("Dx&I27Fj=0zEv>(", localDateTime0, bigDecimal0, "Dx&I27Fj=0zEv>(");
      BigDecimal bigDecimal1 = dTOOrder0.getTotalAmount();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2128L);
      DTOOrder dTOOrder0 = new DTOOrder(", paymentMethod=", (LocalDateTime) null, bigDecimal0, "[9='{[JiV+;qsZG>@^e");
      dTOOrder0.getTotalAmount();
      assertEquals("[9='{[JiV+;qsZG>@^e", dTOOrder0.getPaymentMethod());
      assertEquals(", paymentMethod=", dTOOrder0.getUsername());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-1.0), mathContext0);
      dTOOrder0.setTotalAmount(bigDecimal0);
      BigDecimal bigDecimal1 = dTOOrder0.getTotalAmount();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Instant instant0 = MockInstant.ofEpochMilli(603L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      dTOOrder0.setPurchaseDate(localDateTime0);
      LocalDateTime localDateTime1 = dTOOrder0.getPurchaseDate();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      String string0 = dTOOrder0.getPaymentMethod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      dTOOrder0.setPaymentMethod("");
      String string0 = dTOOrder0.getPaymentMethod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = new Long(0L);
      dTOOrder0.setOrderId(long0);
      Long long1 = dTOOrder0.getOrderId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2128L);
      DTOOrder dTOOrder0 = new DTOOrder(", paymentMethod=", (LocalDateTime) null, bigDecimal0, "[9='{[JiV+;qsZG>@^e");
      Long long0 = new Long(671L);
      dTOOrder0.setOrderId(long0);
      dTOOrder0.getOrderId();
      assertEquals("[9='{[JiV+;qsZG>@^e", dTOOrder0.getPaymentMethod());
      assertEquals(", paymentMethod=", dTOOrder0.getUsername());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = new Long((-1L));
      dTOOrder0.setOrderId(long0);
      Long long1 = dTOOrder0.getOrderId();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2128L);
      DTOOrder dTOOrder0 = new DTOOrder(", paymentMethod=", (LocalDateTime) null, bigDecimal0, "[9='{[JiV+;qsZG>@^e");
      String string0 = dTOOrder0.getPaymentMethod();
      assertEquals(", paymentMethod=", dTOOrder0.getUsername());
      assertEquals("[9='{[JiV+;qsZG>@^e", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      String string0 = dTOOrder0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = dTOOrder0.getOrderId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      BigDecimal bigDecimal0 = dTOOrder0.getTotalAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      LocalDateTime localDateTime0 = dTOOrder0.getPurchaseDate();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      String string0 = dTOOrder0.toString();
      assertEquals("DTOOrder(orderId=null, username=null, purchaseDate=null, totalAmount=null, paymentMethod=null)", string0);
  }
}
