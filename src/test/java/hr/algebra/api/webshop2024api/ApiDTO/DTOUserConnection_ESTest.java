/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:13:00 GMT 2024
 */

package hr.algebra.api.webshop2024api.ApiDTO;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.ApiDTO.DTOUserConnection;
import java.time.LocalDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTOUserConnection_ESTest extends DTOUserConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection("", (LocalDateTime) null, "9X7pz;$uc2tYS");
      assertEquals("9X7pz;$uc2tYS", dTOUserConnection0.getIpAddress());
      assertEquals("", dTOUserConnection0.getUsername());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection((LocalDateTime) null, "");
      dTOUserConnection0.setUsername("+Fo69j*<-`J7R(y~");
      String string0 = dTOUserConnection0.getUsername();
      assertEquals("+Fo69j*<-`J7R(y~", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection();
      dTOUserConnection0.setUsername("");
      String string0 = dTOUserConnection0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection(localDateTime0, ", ipAddress=");
      LocalDateTime localDateTime1 = dTOUserConnection0.getLastConnection();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection();
      dTOUserConnection0.setIpAddress("?7Q:lC>]B\"E6Q");
      String string0 = dTOUserConnection0.getIpAddress();
      assertEquals("?7Q:lC>]B\"E6Q", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection(localDateTime0, ", ipAddress=");
      dTOUserConnection0.setIpAddress("");
      String string0 = dTOUserConnection0.getIpAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection();
      String string0 = dTOUserConnection0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection();
      LocalDateTime localDateTime0 = dTOUserConnection0.getLastConnection();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection();
      String string0 = dTOUserConnection0.getIpAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection("[8KB#I+cD]|<AqC", (LocalDateTime) null, "[8KB#I+cD]|<AqC");
      dTOUserConnection0.setLastConnection((LocalDateTime) null);
      assertEquals("[8KB#I+cD]|<AqC", dTOUserConnection0.getUsername());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DTOUserConnection dTOUserConnection0 = new DTOUserConnection(localDateTime0, "5:kG@{+");
      String string0 = dTOUserConnection0.toString();
      assertEquals("DTOUserConnection(username=null, lastConnection=2014-02-14T20:21:21.320, ipAddress=5:kG@{+)", string0);
  }
}
