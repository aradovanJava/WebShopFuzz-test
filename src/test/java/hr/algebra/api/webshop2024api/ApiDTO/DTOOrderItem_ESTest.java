/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:04:13 GMT 2024
 */

package hr.algebra.api.webshop2024api.ApiDTO;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.ApiDTO.DTOCategory;
import hr.algebra.api.webshop2024api.ApiDTO.DTOOrder;
import hr.algebra.api.webshop2024api.ApiDTO.DTOOrderItem;
import hr.algebra.api.webshop2024api.ApiDTO.DTOProduct;
import hr.algebra.api.webshop2024api.ApiDTO.DTOSubcategory;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTOOrderItem_ESTest extends DTOOrderItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Integer integer0 = new Integer(0);
      dTOOrderItem0.setQuantity(integer0);
      Integer integer1 = dTOOrderItem0.getQuantity();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Integer integer0 = dTOOrderItem0.getQuantity();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Integer integer0 = new Integer((-1301));
      dTOOrderItem0.setQuantity(integer0);
      Integer integer1 = dTOOrderItem0.getQuantity();
      assertEquals((-1301), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      DTOProduct dTOProduct0 = dTOOrderItem0.getProduct();
      assertNull(dTOProduct0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      BigDecimal bigDecimal0 = new BigDecimal((-978.575769574321));
      dTOOrderItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = dTOOrderItem0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DTOCategory dTOCategory0 = new DTOCategory(long0, ", quantity=");
      DTOSubcategory dTOSubcategory0 = new DTOSubcategory("", dTOCategory0);
      DTOProduct dTOProduct0 = new DTOProduct((String) null, "", bigDecimal0, dTOSubcategory0, "");
      Integer integer0 = new Integer(1);
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, integer0, bigDecimal0);
      BigDecimal bigDecimal1 = dTOOrderItem0.getPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      BigDecimal bigDecimal0 = new BigDecimal(2075);
      dTOOrderItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = dTOOrderItem0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      DTOProduct dTOProduct0 = new DTOProduct();
      Integer integer0 = new Integer(2469);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2469);
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, integer0, bigDecimal0);
      BigDecimal bigDecimal1 = dTOOrderItem0.getPrice();
      assertEquals((byte) (-91), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Long long0 = new Long(0L);
      dTOOrderItem0.setOrderItemId(long0);
      Long long1 = dTOOrderItem0.getOrderItemId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Long long0 = new Long(1L);
      dTOOrderItem0.setOrderItemId(long0);
      Long long1 = dTOOrderItem0.getOrderItemId();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DTOOrder dTOOrder0 = new DTOOrder("", localDateTime0, bigDecimal0, "");
      DTOProduct dTOProduct0 = new DTOProduct();
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, (Integer) null, bigDecimal0);
      Long long0 = new Long((-583L));
      dTOOrderItem0.setOrderItemId(long0);
      Long long1 = dTOOrderItem0.getOrderItemId();
      assertEquals((-583L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DTOOrder dTOOrder0 = new DTOOrder("", (LocalDateTime) null, bigDecimal0, (String) null);
      DTOProduct dTOProduct0 = new DTOProduct((String) null, "%+U`kQ0CFk(", bigDecimal0, (DTOSubcategory) null, "hr.algebra.api.webshop2024api.ApiDTO.DTOSubcategory");
      Integer integer0 = new Integer(0);
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, integer0, bigDecimal0);
      DTOOrder dTOOrder1 = dTOOrderItem0.getOrder();
      assertNull(dTOOrder1.getPaymentMethod());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DTOCategory dTOCategory0 = new DTOCategory(long0, ", quantity=");
      DTOSubcategory dTOSubcategory0 = new DTOSubcategory("", dTOCategory0);
      DTOProduct dTOProduct0 = new DTOProduct((String) null, "", bigDecimal0, dTOSubcategory0, "");
      Integer integer0 = new Integer(1);
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, integer0, bigDecimal0);
      Integer integer1 = dTOOrderItem0.getQuantity();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DTOOrder dTOOrder0 = new DTOOrder();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DTOCategory dTOCategory0 = new DTOCategory(long0, ", quantity=");
      DTOSubcategory dTOSubcategory0 = new DTOSubcategory("", dTOCategory0);
      DTOProduct dTOProduct0 = new DTOProduct((String) null, "", bigDecimal0, dTOSubcategory0, "");
      Integer integer0 = new Integer(1);
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem(dTOOrder0, dTOProduct0, integer0, bigDecimal0);
      DTOProduct dTOProduct1 = dTOOrderItem0.getProduct();
      assertSame(dTOProduct0, dTOProduct1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      Long long0 = dTOOrderItem0.getOrderItemId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      DTOOrder dTOOrder0 = dTOOrderItem0.getOrder();
      assertNull(dTOOrder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem();
      BigDecimal bigDecimal0 = dTOOrderItem0.getPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DTOProduct dTOProduct0 = new DTOProduct();
      Integer integer0 = new Integer(1561);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem((DTOOrder) null, dTOProduct0, integer0, bigDecimal0);
      dTOOrderItem0.setOrder((DTOOrder) null);
      assertNull(dTOOrderItem0.getOrderItemId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DTOProduct dTOProduct0 = new DTOProduct();
      Integer integer0 = new Integer(1561);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem((DTOOrder) null, dTOProduct0, integer0, bigDecimal0);
      dTOOrderItem0.setProduct(dTOProduct0);
      assertNull(dTOProduct0.getProductId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DTOProduct dTOProduct0 = new DTOProduct();
      Integer integer0 = new Integer(1561);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DTOOrderItem dTOOrderItem0 = new DTOOrderItem((DTOOrder) null, dTOProduct0, integer0, bigDecimal0);
      String string0 = dTOOrderItem0.toString();
      assertEquals("DTOOrderItem(orderItemId=null, order=null, product=DTOProduct(productId=null, name=null, description=null, price=null, subcategory=null, imageUrl=null, b64image=null), quantity=1561, price=0)", string0);
  }
}
