/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:34:58 GMT 2024
 */

package hr.algebra.api.webshop2024api.ApiDTO;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.ApiDTO.DTOAuthority;
import hr.algebra.api.webshop2024api.ApiDTO.DTOUser;
import hr.algebra.dal.webshop2024dal.Enum.Role;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTOUser_ESTest extends DTOUser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      dTOUser0.toString();
      dTOUser0.setUsername("ROLE_ADMIN");
      dTOUser0.setUsername("ROLE_SHOPPER");
      dTOUser0.setAuthorities(set0);
      DTOUser dTOUser1 = new DTOUser("ROLE_ADMIN", "$VALUES", true, "T", set0);
      dTOUser1.setEmail("9~k");
      dTOUser1.setEmail((String) null);
      Set<DTOAuthority> set1 = dTOUser0.getAuthorities();
      dTOUser0.setAuthorities(set1);
      dTOUser1.setEmail("%/&3b?");
      LinkedHashSet<DTOAuthority> linkedHashSet0 = new LinkedHashSet<DTOAuthority>();
      Role role0 = Role.ROLE_SHOPPER;
      DTOAuthority dTOAuthority0 = new DTOAuthority(dTOUser0, role0);
      linkedHashSet0.add(dTOAuthority0);
      linkedHashSet0.add(dTOAuthority0);
      dTOUser1.setAuthorities(linkedHashSet0);
      dTOUser0.setAuthorities(set1);
      dTOUser1.getEmail();
      dTOUser0.getEmail();
      dTOUser0.setEnabled(true);
      dTOUser0.setEmail("ROLE_ADMIN");
      dTOUser0.setEmail((String) null);
      assertTrue(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.getUsername();
      dTOUser0.setPassword("vh^X+yr)");
      dTOUser0.setPassword((String) null);
      dTOUser0.setEmail("");
      dTOUser0.isEnabled();
      dTOUser0.setEnabled(false);
      dTOUser0.setEmail((String) null);
      dTOUser0.setUsername("");
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      dTOUser0.getUsername();
      dTOUser0.getEmail();
      dTOUser0.setEnabled(false);
      dTOUser0.setAuthorities(set0);
      dTOUser0.getEmail();
      dTOUser0.setUsername("Q]|JH-!#@u`vNhihi_");
      dTOUser0.setEnabled(true);
      dTOUser0.toString();
      dTOUser0.toString();
      dTOUser0.getPassword();
      boolean boolean0 = dTOUser0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.setEnabled(false);
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      DTOUser dTOUser1 = new DTOUser("5\"", "4", false, "5\"", set0);
      Set<DTOAuthority> set1 = dTOUser1.getAuthorities();
      DTOUser dTOUser2 = new DTOUser((String) null, (String) null, false, (String) null, set1);
      boolean boolean0 = dTOUser2.isEnabled();
      assertFalse(boolean0);
      
      dTOUser1.setEnabled(false);
      String string0 = dTOUser1.toString();
      assertEquals("DTOUser(username=5\", password=4, enabled=false, email=5\", authorities=[])", string0);
      
      dTOUser2.setEnabled(false);
      dTOUser0.setEnabled(false);
      dTOUser2.setUsername((String) null);
      dTOUser2.getEmail();
      dTOUser2.setAuthorities(set1);
      dTOUser2.getUsername();
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.setEnabled(true);
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      dTOUser0.setAuthorities(set0);
      DTOUser dTOUser1 = new DTOUser("", ", user=", true, ", user=", set0);
      dTOUser0.setUsername("");
      dTOUser0.setUsername("2%j8&L");
      dTOUser1.setEmail(", user=");
      dTOUser1.getPassword();
      dTOUser1.setEnabled(true);
      dTOUser1.setAuthorities(set0);
      String string0 = dTOUser1.toString();
      dTOUser0.setPassword("DTOUser(username=, password=, user=, enabled=true, email=, user=, authorities=[])");
      dTOUser1.setEmail("P?7fh8tpFa");
      dTOUser1.setUsername("DTOUser(username=, password=, user=, enabled=true, email=, user=, authorities=[])");
      dTOUser1.setPassword("DTOUser(username=, password=, user=, enabled=true, email=, user=, authorities=[])");
      String string1 = dTOUser1.getUsername();
      assertTrue(dTOUser0.isEnabled());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.getUsername();
      String string0 = dTOUser0.toString();
      assertEquals("DTOUser(username=null, password=null, enabled=false, email=null, authorities=[])", string0);
      
      dTOUser0.setEnabled(false);
      dTOUser0.setEmail("");
      LinkedHashSet<DTOAuthority> linkedHashSet0 = new LinkedHashSet<DTOAuthority>();
      Role role0 = Role.ROLE_SHOPPER;
      DTOAuthority dTOAuthority0 = new DTOAuthority(dTOUser0, role0);
      linkedHashSet0.add(dTOAuthority0);
      Role role1 = Role.ROLE_SHOPPER;
      DTOAuthority dTOAuthority1 = new DTOAuthority(dTOUser0, role1);
      linkedHashSet0.add(dTOAuthority1);
      dTOUser0.setAuthorities(linkedHashSet0);
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      dTOUser0.setAuthorities(set0);
      dTOUser0.setUsername("DTOUser(username=null, password=null, enabled=false, email=null, authorities=[])");
      dTOUser0.setEmail("");
      dTOUser0.setPassword("xEj:q5p)7nduinGMW&T");
      dTOUser0.getPassword();
      dTOUser0.setAuthorities(linkedHashSet0);
      dTOUser0.setUsername("");
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      boolean boolean0 = dTOUser0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      LinkedHashSet<DTOAuthority> linkedHashSet0 = new LinkedHashSet<DTOAuthority>(2089, 2089);
      dTOUser0.setEnabled(false);
      dTOUser0.setAuthorities(linkedHashSet0);
      dTOUser0.getPassword();
      dTOUser0.setEnabled(false);
      String string0 = dTOUser0.toString();
      assertEquals("DTOUser(username=null, password=null, enabled=false, email=null, authorities=[])", string0);
      
      dTOUser0.getPassword();
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser("", "", true, "", (Set<DTOAuthority>) null);
      dTOUser0.toString();
      dTOUser0.setAuthorities((Set<DTOAuthority>) null);
      dTOUser0.setAuthorities((Set<DTOAuthority>) null);
      dTOUser0.setAuthorities((Set<DTOAuthority>) null);
      dTOUser0.setEnabled(true);
      dTOUser0.getPassword();
      dTOUser0.setEmail("");
      dTOUser0.setPassword("");
      dTOUser0.setEnabled(true);
      dTOUser0.getEmail();
      dTOUser0.getEmail();
      dTOUser0.setEmail("");
      dTOUser0.setPassword("");
      dTOUser0.setEnabled(false);
      dTOUser0.setAuthorities((Set<DTOAuthority>) null);
      dTOUser0.setAuthorities((Set<DTOAuthority>) null);
      dTOUser0.getAuthorities();
      dTOUser0.setUsername("#hC");
      dTOUser0.setEmail("");
      dTOUser0.setPassword("DTOUser(username=, password=, enabled=true, email=, authorities=null)");
      dTOUser0.setPassword("u}cz~S");
      dTOUser0.getEmail();
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      LinkedHashSet<DTOAuthority> linkedHashSet0 = new LinkedHashSet<DTOAuthority>(set0);
      DTOUser dTOUser1 = new DTOUser("ROLE_ADMIN", "ROLE_ADMIN", false, "", linkedHashSet0);
      dTOUser1.getAuthorities();
      assertEquals("", dTOUser1.getEmail());
      assertEquals("ROLE_ADMIN", dTOUser1.getPassword());
      assertEquals("ROLE_ADMIN", dTOUser1.getUsername());
      assertFalse(dTOUser1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.toString();
      Set<DTOAuthority> set0 = dTOUser0.getAuthorities();
      DTOUser dTOUser1 = new DTOUser("<Jf3^=uE", "<Jf3^=uE", false, "<Jf3^=uE", set0);
      dTOUser1.getPassword();
      dTOUser0.toString();
      dTOUser0.setUsername("DTOUser(username=null, password=null, enabled=false, email=null, authorities=[])");
      dTOUser1.setEnabled(false);
      dTOUser0.setPassword("<Jf3^=uE");
      assertFalse(dTOUser0.equals((Object)dTOUser1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.setUsername("");
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DTOUser dTOUser0 = new DTOUser();
      dTOUser0.setUsername("%Vd");
      dTOUser0.getUsername();
      dTOUser0.setEmail((String) null);
      dTOUser0.getUsername();
      DTOUser dTOUser1 = new DTOUser();
      Set<DTOAuthority> set0 = dTOUser1.getAuthorities();
      dTOUser0.setAuthorities(set0);
      dTOUser0.getAuthorities();
      dTOUser0.setEnabled(false);
      assertFalse(dTOUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<DTOAuthority> linkedHashSet0 = new LinkedHashSet<DTOAuthority>();
      DTOUser dTOUser0 = new DTOUser("", "", true, "", linkedHashSet0);
      String string0 = dTOUser0.toString();
      assertEquals("DTOUser(username=, password=, enabled=true, email=, authorities=[])", string0);
      
      dTOUser0.setPassword((String) null);
      dTOUser0.getUsername();
      dTOUser0.getAuthorities();
      assertTrue(dTOUser0.isEnabled());
  }
}
