/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:29:29 GMT 2024
 */

package hr.algebra.api.webshop2024api.CustomResponseErrors;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ErrorResponse_ESTest extends ErrorResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2337);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 2337, zoneOffset0);
      errorResponse0.setTimestamp(localDateTime0);
      LocalDateTime localDateTime1 = errorResponse0.getTimestamp();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      int int0 = errorResponse0.getStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      errorResponse0.setStatus((-4160));
      int int0 = errorResponse0.getStatus();
      assertEquals((-4160), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      String string0 = errorResponse0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      errorResponse0.setPath("");
      String string0 = errorResponse0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      errorResponse0.setMessage("hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse");
      String string0 = errorResponse0.getMessage();
      assertEquals("hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      errorResponse0.setMessage("");
      String string0 = errorResponse0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      String string0 = errorResponse0.getError();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      errorResponse0.setError("");
      String string0 = errorResponse0.getError();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ErrorResponse errorResponse0 = new ErrorResponse(localDateTime0, 1, "hT4", (String) null, " 7D.0");
      int int0 = errorResponse0.getStatus();
      assertEquals("hT4", errorResponse0.getError());
      assertEquals(1, int0);
      assertEquals(" 7D.0", errorResponse0.getPath());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ErrorResponse errorResponse0 = new ErrorResponse(localDateTime0, 1, "hT4", (String) null, " 7D.0");
      String string0 = errorResponse0.getPath();
      assertEquals(" 7D.0", string0);
      assertEquals(1, errorResponse0.getStatus());
      assertNotNull(string0);
      assertEquals("hT4", errorResponse0.getError());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ErrorResponse errorResponse0 = new ErrorResponse(localDateTime0, 1, "hT4", (String) null, " 7D.0");
      String string0 = errorResponse0.getMessage();
      assertEquals(1, errorResponse0.getStatus());
      assertEquals(" 7D.0", errorResponse0.getPath());
      assertNull(string0);
      assertEquals("hT4", errorResponse0.getError());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ErrorResponse errorResponse0 = new ErrorResponse(localDateTime0, 1, "hT4", (String) null, " 7D.0");
      String string0 = errorResponse0.getError();
      assertEquals(1, errorResponse0.getStatus());
      assertNotNull(string0);
      assertEquals(" 7D.0", errorResponse0.getPath());
      assertEquals("hT4", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorResponse errorResponse0 = new ErrorResponse();
      LocalDateTime localDateTime0 = errorResponse0.getTimestamp();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ErrorResponse errorResponse0 = new ErrorResponse(localDateTime0, (-26), "hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse", "hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse", "hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse");
      String string0 = errorResponse0.toString();
      assertEquals("ErrorResponse(timestamp=2014-02-14T20:21:21.320, status=-26, error=hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse, message=hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse, path=hr.algebra.api.webshop2024api.CustomResponseErrors.ErrorResponse)", string0);
  }
}
