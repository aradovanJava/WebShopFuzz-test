/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:44:01 GMT 2024
 */

package hr.algebra.api.webshop2024api.ApiMapper;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.api.webshop2024api.ApiDTO.DTOCartItem;
import hr.algebra.api.webshop2024api.ApiDTO.DTOCategory;
import hr.algebra.api.webshop2024api.ApiDTO.DTOProduct;
import hr.algebra.api.webshop2024api.ApiDTO.DTOShoppingCart;
import hr.algebra.api.webshop2024api.ApiDTO.DTOSubcategory;
import hr.algebra.api.webshop2024api.ApiMapper.CartItemMapperImpl;
import hr.algebra.dal.webshop2024dal.Entity.CartItem;
import hr.algebra.dal.webshop2024dal.Entity.Category;
import hr.algebra.dal.webshop2024dal.Entity.Product;
import hr.algebra.dal.webshop2024dal.Entity.ShoppingCart;
import hr.algebra.dal.webshop2024dal.Entity.Subcategory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CartItemMapperImpl_ESTest extends CartItemMapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOSubcategory dTOSubcategory0 = cartItemMapperImpl0.subcategoryToDTOSubcategory((Subcategory) null);
      assertNull(dTOSubcategory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOShoppingCart dTOShoppingCart0 = cartItemMapperImpl0.shoppingCartToDTOShoppingCart((ShoppingCart) null);
      assertNull(dTOShoppingCart0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      ShoppingCart shoppingCart0 = new ShoppingCart();
      DTOShoppingCart dTOShoppingCart0 = cartItemMapperImpl0.shoppingCartToDTOShoppingCart(shoppingCart0);
      assertNull(dTOShoppingCart0.getUsername());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOProduct dTOProduct0 = cartItemMapperImpl0.productToDTOProduct((Product) null);
      assertNull(dTOProduct0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOProduct dTOProduct0 = new DTOProduct();
      Product product0 = cartItemMapperImpl0.dTOProductToProduct(dTOProduct0);
      DTOProduct dTOProduct1 = cartItemMapperImpl0.productToDTOProduct(product0);
      assertNull(dTOProduct1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      Subcategory subcategory0 = cartItemMapperImpl0.dTOSubcategoryToSubcategory((DTOSubcategory) null);
      assertNull(subcategory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      ShoppingCart shoppingCart0 = cartItemMapperImpl0.dTOShoppingCartToShoppingCart((DTOShoppingCart) null);
      assertNull(shoppingCart0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      Product product0 = cartItemMapperImpl0.dTOProductToProduct((DTOProduct) null);
      assertNull(product0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      Category category0 = cartItemMapperImpl0.dTOCategoryToCategory((DTOCategory) null);
      assertNull(category0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOCategory dTOCategory0 = cartItemMapperImpl0.categoryToDTOCategory((Category) null);
      assertNull(dTOCategory0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      Subcategory subcategory0 = new Subcategory();
      DTOSubcategory dTOSubcategory0 = cartItemMapperImpl0.subcategoryToDTOSubcategory(subcategory0);
      Subcategory subcategory1 = cartItemMapperImpl0.dTOSubcategoryToSubcategory(dTOSubcategory0);
      assertNotSame(subcategory0, subcategory1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOCategory dTOCategory0 = new DTOCategory("747[");
      Category category0 = cartItemMapperImpl0.dTOCategoryToCategory(dTOCategory0);
      assertNull(category0.getCategoryId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOShoppingCart dTOShoppingCart0 = new DTOShoppingCart("", ", sessionId=");
      ShoppingCart shoppingCart0 = cartItemMapperImpl0.dTOShoppingCartToShoppingCart(dTOShoppingCart0);
      assertEquals("", shoppingCart0.getUsername());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      Category category0 = new Category();
      DTOCategory dTOCategory0 = cartItemMapperImpl0.categoryToDTOCategory(category0);
      assertNull(dTOCategory0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      CartItem cartItem0 = cartItemMapperImpl0.DTOCartItemToCartItem((DTOCartItem) null);
      assertNull(cartItem0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      CartItem cartItem0 = new CartItem();
      DTOCartItem dTOCartItem0 = cartItemMapperImpl0.CartItemToDTOCartItem(cartItem0);
      CartItem cartItem1 = cartItemMapperImpl0.DTOCartItemToCartItem(dTOCartItem0);
      assertNotSame(cartItem0, cartItem1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CartItemMapperImpl cartItemMapperImpl0 = new CartItemMapperImpl();
      DTOCartItem dTOCartItem0 = cartItemMapperImpl0.CartItemToDTOCartItem((CartItem) null);
      assertNull(dTOCartItem0);
  }
}
