/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 18 22:28:13 GMT 2024
 */

package hr.algebra.webshop2024.Mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import hr.algebra.dal.webshop2024dal.Entity.Authority;
import hr.algebra.dal.webshop2024dal.Entity.Notification;
import hr.algebra.dal.webshop2024dal.Entity.User;
import hr.algebra.webshop2024.DTO.DTONotification;
import hr.algebra.webshop2024.Mapper.NotificationMapperImpl;
import java.time.LocalDateTime;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NotificationMapperImpl_ESTest extends NotificationMapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotificationMapperImpl notificationMapperImpl0 = new NotificationMapperImpl();
      LinkedHashSet<Authority> linkedHashSet0 = new LinkedHashSet<Authority>();
      User user0 = new User("Authority(id=", true, "Authority(id=", linkedHashSet0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DTONotification dTONotification0 = new DTONotification(user0, "Authority(id=", "Authority(id=", localDateTime0, localDateTime0, true);
      Notification notification0 = notificationMapperImpl0.DTONotificationToNotification(dTONotification0);
      DTONotification dTONotification1 = notificationMapperImpl0.NotificationToDTONotification(notification0);
      assertFalse(dTONotification1.equals((Object)dTONotification0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NotificationMapperImpl notificationMapperImpl0 = new NotificationMapperImpl();
      Notification notification0 = new Notification();
      DTONotification dTONotification0 = notificationMapperImpl0.NotificationToDTONotification(notification0);
      dTONotification0.setViewed(true);
      Notification notification1 = notificationMapperImpl0.DTONotificationToNotification(dTONotification0);
      assertNull(notification1.getTitle());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotificationMapperImpl notificationMapperImpl0 = new NotificationMapperImpl();
      Notification notification0 = notificationMapperImpl0.DTONotificationToNotification((DTONotification) null);
      assertNull(notification0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NotificationMapperImpl notificationMapperImpl0 = new NotificationMapperImpl();
      DTONotification dTONotification0 = notificationMapperImpl0.NotificationToDTONotification((Notification) null);
      assertNull(dTONotification0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NotificationMapperImpl notificationMapperImpl0 = new NotificationMapperImpl();
      DTONotification dTONotification0 = new DTONotification();
      Notification notification0 = notificationMapperImpl0.DTONotificationToNotification(dTONotification0);
      DTONotification dTONotification1 = notificationMapperImpl0.NotificationToDTONotification(notification0);
      assertFalse(dTONotification1.isViewed());
  }
}
